{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>This website is intended to help current (and future students) of BCIT's COMP 3725 Intro To Data Communications for CST course. This is where I will be compiling my notes every week. There will be parallels with the lectures (duh),  but it's not a one-to-one copy and should not be considered as a replacement/alternative to other course, more like a supplement.</p>"},{"location":"#to-future-students-and-other-sets","title":"To future students and other sets","text":"<p>Since this is just a single summer session, course material may change, and I don't think I will be able to change it myself, so feel free to fork it or ask to be a contributor! You can contact me via GitHub or LinkedIn.</p>"},{"location":"#admonitions","title":"Admonitions","text":"<p>Note</p> <p>This is for auxiliary information, outside reference, or a related sidenote.</p> <p>Warning</p> <p>This admonition is for things that we should look out for, pitfalls or misconceptions.</p>"},{"location":"appendix/","title":"Appendix","text":"<p>Other background information and outside references can be found here.</p>"},{"location":"appendix/#hamming-codes","title":"Hamming Codes","text":"<p>Hamming Codes is a way to encode a bit string in such a way that a computer will be able to detect up to two bit-flips and correct up to a single bit flip.</p> <p>It leverages several parity bits (1) in specific positions to pinpoint wherei the bit-flip is located,  and therefore flip the bit again to correct it.</p> <ol> <li>If a string of bits have even <code>1</code>s,     the parity is <code>0</code>, <code>1</code> otherwise.</li> </ol> <p>See the note below for more information.</p> <p>Note</p> <p>Check out 3Blue1Brown's video on  Hamming Codes to understand the motivation behind the methodology and how it works. </p>"},{"location":"appendix/#hamming-distance","title":"Hamming Distance","text":"<p>The Hamming Distance Measures how different two messages of similar length are. It can be programmatically written like so:</p> TypeScript<pre><code>/**\n * Calculates the distance between Arrays s1 and s2.\n * @param s1 an array of T\n * @param s2 another array of T\n * @returns the number of differing elements.\n *          if s1 and s2 have different lengths, -1.\n */\nfunction hammingDistance&lt;T&gt;(s1: Array&lt;T&gt;, s2: Array&lt;T&gt;): number {\n    // guard case\n    if (s1.length != s2.length) {\n        return -1;\n    }\n    let  count: number = 0; // set accumulator\n    for (let i: number = 0; i &lt; s1.length; ++i) {\n        count += Number(s1[i] != s2[i]); // cast to number\n    }\n    return count;\n}\n</code></pre>"},{"location":"appendix/#math","title":"Math","text":"<p>These are the mathematical rules/identities that we are going to use.</p>"},{"location":"appendix/#trigonometry","title":"Trigonometry","text":"<p>Imagine a circle with a radius of \\(r\\), lying on a 2-dimensional plane with its centre on the origin. With any angle \\(t\\), the coorindates of any point on the circle's edge can be expressed as</p> \\[ \\begin{align*}     c_x(t) &amp;= r\\cos(t) \\\\     c_y(t) &amp;= r\\sin(t) \\end{align*} \\] Unit Circle \\(r = 1\\) <p> </p> <p>In this course we will focus mostly on the sine and cosine waves, as radio signals encode information via their properties: amplitude \\(A\\), frequency \\(f\\), phase shift \\(\\phi\\), and offset \\(c\\). We can rewrite the sine function to show where these properties lie. $$     s(t) = A \\sin(2\\pi f t + \\phi) + c $$</p> <p>\\(A\\) determines how tall the wave is. \\(2\\pi f\\) (1) decides how frequent the peaks/troughs are.</p> <ol> <li>The \\(2 \\pi\\) factor is there from the fact that every \\(2 \\pi\\) radians    completes the cycle. Say \\(f = 1, \\phi = 0\\). If \\(t = 1\\), then \\(sin(2 \\pi) = 0\\).    It is a more convenient way to characterise the wave.</li> </ol> <p>\\(\\phi\\) is the phase shift. This translates the wave to the left or right.</p> <p>Be careful about shifts!</p> <p>A positive \\(\\phi\\) means a left shift, right otherwise.</p> \\[     \\text{shift}      = \\begin{cases}         \\text{right} &amp; \\phi &lt; 0 \\\\         \\text{left}  &amp; \\phi &gt; 0 \\\\         \\text{none}  &amp; \\phi = 0     \\end{cases} \\] <p>\\(c\\) is the vertical shift.</p> <p>Here are identities in Forouzan's appendix.</p> name formula Pythagorean $ \\sin^2(x) + \\cos^2(x) = 1 $ even/odd \\(\\sin(-x) = -\\sin(x)\\) \\(\\cos(-x) = \\cos(x)\\) sum \\(\\sin(x + y) = \\sin(x)\\cos(y) + \\cos(x)\\sin(y)\\) \\(\\cos(x + y) = \\cos(x)\\cos(y) - \\sin(x)\\sin(y)\\) difference \\(\\sin(x - y) = \\sin(x)\\cos(y) - \\cos(x)\\sin(y)\\) \\(\\cos(x - y) = \\cos(x)\\cos(y) + \\sin(x)\\sin(y)\\) product to sum \\(\\sin(x)\\sin(y) = \\frac{1}{2}[\\cos(x - y) - \\cos(x + y)]\\) \\(\\cos(x)\\cos(y) = \\frac{1}{2}[\\cos(x - y) + \\cos(x + y)]\\) \\(\\sin(x)\\cos(y) = \\frac{1}{2}[\\sin(x + y) + \\sin(x - y)]\\) \\(\\cos(x)\\sin(y) = \\frac{1}{2}[\\sin(x + y) - \\sin(x -y)]\\)"},{"location":"appendix/#logarithms","title":"Logarithms","text":"<p>Logarithms answers the question \"what exponent should I raise \\(b\\) to to get \\(x\\)?\" Symbolically, it is written as</p> \\[ \\begin{equation*}     b^y = x \\rightarrow \\log_b(x) = y \\end{equation*} \\] <p>In essence, it is the inverse of the exponential function.</p>"},{"location":"appendix/#properties","title":"Properties","text":"<p>Since, the output of \\(\\log\\) is an exponent, so its properties are similar to that of one.</p> \\[     \\begin{align*}          \\log_b(1) &amp;= &amp;0 \\\\         \\log_b(b) &amp;= &amp;1 \\\\         \\log_b\\left(\\frac{x}{y}\\right) &amp;= &amp;\\log_b(x) -\\log_b(y) \\\\         \\log_b(xy) &amp;= &amp;\\log_b(x) + \\log_b(y) \\\\         \\log_b(x^{y}) &amp;= &amp;y\\log_b(x) \\\\         \\log_b(y) &amp;= &amp;\\frac{\\log_c(y)}{\\log_c(b)}     \\end{align*} \\]"},{"location":"logistics/","title":"Course Logistics","text":"name percent final 35 labs/quizzes 35 assignments 30 total 100 <p>Passing Grade</p> <p>The passing grade for this course is 60%.</p>"},{"location":"module-01/","title":"Introduction","text":""},{"location":"module-01/#data-communications","title":"Data Communications","text":"<p>Communication is essentially the movement of information, where it can be local (within a system) or remote (between systems).</p> <p>In extension, data communications is defined as: </p> <p>... the exchange of data between two devices via some form of transmission media.</p> <p>So, in a communicating system, there must be at least two devices, and a (physical) way to transport information between the devices.</p>"},{"location":"module-01/#components","title":"Components","text":"<p>Two devices and a medium is an informal way to describe the components of a data communications system. Formally, there are five components in a data communications system.</p> <ol> <li>Sender: sends the message</li> <li>Receiver: receives the message</li> <li>Medium: the (physical) path the message need to travel on to go from the sender to the receiver.</li> <li>Message: the data</li> <li>Protocol: a set of rules that both the sender and receiver agree to in order to                  properly understand messages between communicating devices.</li> </ol> <pre><code>---\nconfig:\n    layout: elk\n---\nflowchart LR\n    subgraph TX\n        P[Protocol]\n        S[Sender] \n    end\n    subgraph RX\n        P_[Protocol]\n        R[Receiver] \n    end\n    S --- M[Message]\n    M --&gt; R\n    subgraph \"transmission medium\"\n        M\n    end</code></pre>      Components of a data communications system."},{"location":"module-01/#data-flow","title":"Data Flow","text":"<p>There are three kinds of communication between two devices, namely simplex, half-duplex, and duplex.</p> <ol> <li> <p>Simplex: Data only goes in one direction (e.g. a mainframe to a monitor, keyboard to a computer).                 This uses the entire capacity of the medium to send the data. This is similar to a one-way street.</p> <p> <pre><code>flowchart LR\n    D1[Device 1] -- \"direction of data\" --&gt; D2[Device 2]\n</code></pre> </p> </li> <li> <p>Half-duplex: Data goes in two directions, but the entire capacity of the medium is used to send data.                     To avoid destructive interference or errors, only one direction is available at a time.                     Continuing the traffic analogy, this happens in a two-way street where one lane is blocked,                     and only one direction of traffic is available at a time.</p> <p> <pre><code>flowchart LR\n    D1[Device 1] -- \"direction at time 1\" --&gt; D2[Device 2]\n    D2 -- \"direction at time 2\" --&gt; D1\n</code></pre>  3. Full-duplex: Data goes in both directions at all times.                  This is done by allocating a portion for one direction, and the rest for the other.                 Just like a full-on two-way street.</p> <p> <pre><code>flowchart LR\n    D1[Device 1] &lt;-- \"direction at all times\" --&gt; D2[Device 2]</code></pre> </p> </li> </ol> <p>Allocation</p> <p>In a full-duplex, allocation is not always 50-50.</p>"},{"location":"module-01/#networks","title":"Networks","text":"<p>A network is a connected graph of communicating devices. It must have a set of devices, and these devices must be able to communicate. In this definition, a device can be a:</p> <ul> <li>host: something that receives and processes the data such as a desktop, phone, etc.</li> <li>connecting device: something that routes and/or transforms information from one interface                          to another.</li> </ul> <p>or both!</p>"},{"location":"module-01/#criteria","title":"Criteria","text":"<p>A network is evaluated through several criteria. Networks must meet a certain number of them. The most important ones are:</p> <ul> <li>Performance: throughput (data flow per unit time) and latency (delay).</li> <li>Reliability: how often the system fails, and how fast it recovers from one.</li> <li>Security:    data protection and breach/loss recovery.</li> </ul>"},{"location":"module-01/#types","title":"Types","text":"<p>There are two types of connection.</p> <ul> <li>Point-to-point: Direct connection between two devices.                       The connection's capacity is used to transmit data between them.</li> <li>Multi-point: Multiple devices share a single link,                    and the link's capacity is shared among the devices.                    This means there is a single point of failure for the link.</li> </ul>"},{"location":"module-01/#physical-topology","title":"Physical Topology","text":"<p>The physical topology is the structure of the network, specifically, in what arrangement(s) should our set of devices be connected?</p> <p>Factors in choosing a topology</p> <p>When creating a network topology, we consider two things:</p> <ul> <li>purpose of the network </li> <li>cost</li> </ul> <p>Also, networks do not need to have a single topology. We can combine them according to our needs and budget.</p>"},{"location":"module-01/#fully-connected-mesh","title":"Fully-connected Mesh","text":"<p>Analogous to a complete graph in Mathematics. Every device has a direct (point-to-point) connection with all the other devices. In this topology, \\(n\\) nodes have \\(\\frac{n(n-1)}{2}\\) full-duplex links.</p> advantages disadvantages dedicated links expensive due to cabling and I/O ports needed to implement robust private and secure easy fault identification and isolation"},{"location":"module-01/#star","title":"Star","text":"<p>A star topology involves several devices directly connected to a central hub. As a consequence, data from one device must travel to the hub before going to the destination.</p> advantages disadvantages low cost single point of failure robust easy fault identification and isolation"},{"location":"module-01/#bus","title":"Bus","text":"<p>Popular in the early LAN days, a long cable connects all the devices in a multipoint manner. This cable acts as a backbone/main artery that links every device. Adding a new device is as simple as tapping into the cable.</p> advantages disadvantages easy installation single point of failure low cost / less cabling difficult fault isolation"},{"location":"module-01/#ring","title":"Ring","text":"<p>Each device in the network is directly connected to two immediate neighbours. A more concrete implementation is a device connected to an associated repeater to propagate signals to further devices.</p> advantages disadvantages easy installation and reconfiguration single point of failure easy fault identification and isolation <p>Bus vs. Ring</p> <p>A bus is multi-point while a ring is point-to-point.</p>"},{"location":"module-02/","title":"Network Models","text":"<p>Network models are frameworks for data organisation,  helping us understand how data moves through devices within a network. There are two available models, OSI (Open Systems Interconnection) and  TCP/IP (Transmission Control Protocol/Internet Protocol).</p>"},{"location":"module-02/#protocol-layering","title":"Protocol Layering","text":""},{"location":"module-02/#protocol","title":"Protocol","text":"<p>A protocol is a set of rules that the sender and receiver agree on so that they can understand each other. For simple communication, one protocol is enough,  but nowadays with complex communication (computers have many processes running needing data, etc.),  we need to layer different protocols together in order to redirect and transform data for appropriate needs. This is called protocol layering/modularity.</p>"},{"location":"module-02/#model-layers","title":"Model Layers","text":"<p>Each layer contains several protocols,  responsible for translating data into different forms.</p> <pre><code>flowchart TB\n    subgraph TCP/IP Protocol Suite\n        AA[Application]\n        TT[Transport]\n        NN[Network]\n        DD[Data link]\n        PP[Physical]\n    end\n\n    subgraph OSI\n        A[Application]\n        P[Presentation]\n        S[Session]\n        T[Transport]\n        N[Network]\n        D[Data Link]\n        P[Physical]\n    end</code></pre>"},{"location":"module-02/#addressing","title":"Addressing","text":"<p>Layers in the protocols correspond to a part in an address. For TCP/IP, we have</p> packet name layer address example message application names <code>www.bcit.ca</code> segment  user datagram transport port numbers http (port 80) packet  datagram network logical address your IP frame data link link-layer addresses MAC ID bits physical layer -- --"},{"location":"module-02/#more-on-the-tcpip-protocol-suite","title":"More on the TCP/IP Protocol Suite","text":"<p>TCP/IP Protocol Suite has five layers (1), each of which is responsible for: 1. Application: Enabling user access to the network (2). 2. Transport: Delivers the entire message between processes.    In an address, this would be the port. 3. Network: Delivers packet between hosts. 4. Data link: Delivers frames from one station to the next    without errors. Has two sublayers:     Data Link Control (DLC) for framing, error detection and correction (3) of frames/bits    and Medium Access Control (MAC), where the physical hardware address (4) and medium access    control resides. 5. Physical: Coordinates functions for bit transmission over a medium.    Responsible for bit representation and encoding types.</p> <ol> <li> <p>Note that there is a difference between TCP/IP model and the TCP/IP Protocol Suite,    akin to an abstract idea and its implementation.</p> </li> <li> <p>HTTP, FTP, SMTP, <code>telnet</code>, etc.</p> </li> <li> <p>See Hamming Codes     and Signal-to-noise ratio. </p> </li> <li> <p>Most devices nowadays have two MAC addresses, one for Wi-Fi, and another for Bluetooth. </p> </li> </ol> <p>The \"Physical\" in TCP/IP</p> <p>We can think of the \"Physical\" here as physical properties that is used to represent information rather than the actual medium the information travels through.</p>"},{"location":"module-03/","title":"Introduction to The Physical Layer","text":"<p>Let's take a look at the representation of bits in the physical sense, in other words, how bits are embedded into properties of signals.</p>"},{"location":"module-03/#data","title":"Data","text":"<p>Data is any collection of values that can be used to convey information. They can either be (1) analogue/continuous or (2) digital/discrete.</p>"},{"location":"module-03/#signals","title":"Signals","text":"<p>Signals are the concrete representations of data. Since they are representations, they can also be analog or digital.</p> <p>Due to the continuous nature of analogue signals, there is an uncountable amount of intensity levels they can have over some period of time. Conversely, digital signals can only have a set number of values due to the signals being discrete.</p> <p>Theoretically, analogue signals could represent an infinite amount of data. However the laws of physics, measurement theory, and hardware resolution prevent us from being able to do so. </p>"},{"location":"module-03/#periodicity","title":"Periodicity","text":"<p>Signals can be:</p> <ul> <li>periodic: have a measurable timeframe (period)                  wherein the signal completes a pattern                 within it and goes on subsequently.</li> <li>non-periodic: if the signal is not periodic. </li> </ul>"},{"location":"module-03/#period-and-frequency","title":"Period and Frequency","text":"<p>The period \\(T\\) is the amount of time (usually in seconds) a signal takes to complete one cycle. Frequency \\(f\\), on the other hand, is the number of cycles completed in one second.</p> <p>Essentially, period is the inverse of frequency, and vice versa:</p> \\[ T = \\frac{1}{f} \\]"},{"location":"module-03/#more-on-analog-signals","title":"More on Analog Signals","text":"<p>Periodic analog signals can be</p> <ul> <li>simple: just a sine wave.</li> <li> <p>composite: a signal composed of several sine waves of differing frequencies (1). </p> <ol> <li>see Fourier Transform</li> </ol> </li> </ul>"},{"location":"module-03/#time-and-frequency-domain","title":"Time and Frequency domain","text":"<p>Read Trigonometry for pre-requisite reading.</p>"},{"location":"module-03/#bit-length","title":"Bit Length","text":""},{"location":"module-03/#from-digital-to-composite","title":"From Digital to Composite","text":""}]}